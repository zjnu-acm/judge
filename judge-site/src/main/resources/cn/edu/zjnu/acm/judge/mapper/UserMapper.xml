<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.github.io/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.zjnu.acm.judge.mapper.UserMapper">
    <resultMap id="baseResultMap" type="cn.edu.zjnu.acm.judge.domain.User">
        <id property="id" column="user_id"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="nick" column="nick"/>
        <result property="school" column="school"/>
        <result property="submit" column="submit"/>
        <result property="solved" column="solved"/>
        <result property="accesstime" column="accesstime"/>
        <result property="ip" column="ip"/>
        <result property="createdTime" column="created_time"/>
        <result property="modifiedTime" column="modified_time"/>
        <result property="disabled" column="disabled"/>
    </resultMap>
    <resultMap id="accountResultMap" type="cn.edu.zjnu.acm.judge.data.excel.Account">
        <id property="id" column="user_id"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="nick" column="nick"/>
        <result property="school" column="school"/>
    </resultMap>
    <sql id="columns">
        user_id,
        nick,
        email,
        password,
        school,
        ip,
        solved,
        submit,
        accesstime,
        created_time,
        modified_time
    </sql>
    <sql id="listColumns">
        user_id,
        solved,
        submit,
        nick
    </sql>
    <sql id="propertySelector">
        <choose>
            <when test='"user_id".equalsIgnoreCase(item.property)'>user_id</when>
            <when test='"nick".equalsIgnoreCase(item.property)'>nick</when>
            <when test='"submit".equalsIgnoreCase(item.property)'>submit</when>
            <when test='"ratio".equalsIgnoreCase(item.property)'>solved/submit</when>
            <when test='"solved".equalsIgnoreCase(item.property)'>solved</when>
            <otherwise>user_id</otherwise>
        </choose>
    </sql>
    <select id="findOne" resultMap="baseResultMap">
        select <include refid="columns"/>
        from `user` where user_id=#{id}
    </select>
    <insert id="save">
        insert into `user`(USER_ID,PASSWORD,EMAIL,REG_TIME,NICK,SCHOOL,ip)
        values(#{id},#{password},#{email},now(),#{nick},#{school},ip=#{ip})
    </insert>
    <select id="count" resultType="long">
        SELECT COUNT(*) total FROM `user`
        <where>
            <if test='form.userId!=null and form.userId!=""'>user_id like concat('%',#{form.userId},'%')</if>
            <if test='form.nick!=null and form.nick!=""'> and nick like concat('%',#{form.nick},'%')</if>
            <if test='form.query!=null and form.query!=""'> and (user_id like #{form.query} or nick like #{form.query})</if>
            <if test='form.disabled!=null'>
                and
                <if test='!form.disabled'>
                    not
                </if>
                disabled
            </if>
        </where>
    </select>
    <select id="rank" resultType="long">
        select count(u1.user_id) cnt
        from `user` u1 join `user` u2  on (
            u1.solved&gt;u2.solved or u1.solved=u2.solved and u1.submit&lt;u2.submit or
            u1.solved=u2.solved and u1.submit=u2.submit and u1.user_id&lt;u2.user_id
        ) and not u1.disabled where u2.user_id=#{id}
    </select>
    <select id="neighbours" resultMap="baseResultMap">
        select <include refid="listColumns"/> from (
            (
                select u1.* from `user` u1 join `user` u2  on (
                    u1.solved&gt;u2.solved 
                    or u1.solved=u2.solved and u1.submit&lt;u2.submit
                    or u1.solved=u2.solved and u1.submit=u2.submit and u1.user_id&lt;u2.user_id
                ) and not u1.disabled
                where u2.user_id=#{id}
                order by u1.solved,u1.submit desc,u1.user_id desc limit #{c}
            ) union (
                select * from `user` where user_id=#{id}
            ) union (
                select u2.* from `user` u1 join `user` u2  on (
                    u1.solved&gt;u2.solved
                    or u1.solved=u2.solved and u1.submit&lt;u2.submit
                    or u1.solved=u2.solved and u1.submit=u2.submit and u1.user_id&lt;u2.user_id
                )  and not u2.disabled
                where u1.user_id=#{id} order by u2.solved desc,u2.submit,u2.user_id limit #{c}
            )
        ) z order by solved desc,submit,user_id
    </select>
    <select id="recentrank" resultMap="baseResultMap">
        select
            temp.user_id,
            sol solved,
            sub submit,
            nick
        from (
            select
                user_id,
                sum(if(score=100,1,0)) sol,
                count(*) sub
            from (
                select * from solution order by solution_id desc limit #{count}
            ) s group by user_id
            order by sol desc,sub asc limit 50
        ) temp,`user`
        where temp.user_id=`user`.user_id
    </select>
    <select id="findAll" resultMap="baseResultMap">
        select <include refid="listColumns"/>
        <if test='form.disabled==null or form.disabled==true'>,disabled</if>
        from `user`
        <where>
            <if test='form.userId!=null and form.userId!=""'>user_id like concat('%',#{form.userId},'%')</if>
            <if test='form.nick!=null and form.nick!=""'> and nick like concat('%',#{form.nick},'%')</if>
            <if test='form.query!=null and form.query!=""'> and (user_id like #{form.query} or nick like #{form.query})</if>
            <if test='form.disabled!=null'> and <if test='!form.disabled'> not </if> disabled</if>
        </where>
        <if test='pageable.sort!=null and pageable.sort.iterator().hasNext()'>
            <foreach item='item' collection='pageable.sort' open='order by' separator=','>
                <include refid="propertySelector" /><if test='item.descending'>desc</if>
            </foreach>
        </if>limit #{pageable.offset},#{pageable.size}
    </select>
    <select id="findAllForExport" resultMap="accountResultMap">
        select
            user_id,
            nick,
            password,
            email,
            school
        <if test='form.disabled==null or form.disabled==true'>,disabled</if>
        from `user`
        <where>
            <if test='form.userId!=null and form.userId!=""'>user_id like concat('%',#{form.userId},'%')</if>
            <if test='form.nick!=null and form.nick!=""'> and nick like concat('%',#{form.nick},'%')</if>
            <if test='form.query!=null and form.query!=""'> and (user_id like #{form.query} or nick like #{form.query})</if>
            <if test='form.disabled!=null'> and <if test='!form.disabled'> not </if> disabled</if>
        </where>
        <if test='pageable.sort!=null'>
            <foreach item='item' collection='pageable.sort' open='order by' separator=','>
                <include refid="propertySelector" /><if test='item.descending'>desc</if>
            </foreach>
        </if>
        limit #{pageable.offset},#{pageable.size}
    </select>
    <update id="updateSelective">
        update `user`
        <set>
            <if test='user.id!=null'>user_id=#{user.id},</if>
            <if test='user.email!=null'>email=nullif(#{user.email},''),</if>
            <if test='user.nick!=null'>nick=#{user.nick},</if>
            <if test='user.school!=null'>school=#{user.school},</if>
            <if test='user.password!=null'>password=#{user.password},</if>
            <if test='user.modifiedTime!=null'>modified_time=#{user.modifiedTime},</if>
            <if test='user.accesstime!=null'>accesstime=#{user.accesstime},</if>
            <if test='user.ip!=null'>ip=#{user.ip},</if>
            <if test='user.disabled!=null'>disabled=#{user.disabled},</if>
        </set>
        <where>
            user_id=#{userId}
        </where>
    </update>
    <select id="findAllByUserIds" resultType="string">
        select user_id from `user`
        where user_id in
        <foreach item='item' collection='userIds' open='(' separator=',' close=')'>
            #{item}
        </foreach>
    </select>
    <select id="countAllByUserIds" resultType="long">
        select count(user_id) cnt
        from `user`
        where user_id in
        <foreach item='item' collection='userIds' open='(' separator=',' close=')'>
            #{item}
        </foreach>
    </select>
    <update id="batchUpdate">
        update `user` u join
            <foreach item='item' index='index' collection='accounts' open='(' separator='union' close=')'>
                <if test='index==0'>(select #{item.id} id,#{item.password} password,#{item.nick} nick,#{item.school} school,#{item.email} email)</if>
                <if test='index!=0'>(select #{item.id},#{item.password},#{item.nick},#{item.school},#{item.email})</if>
            </foreach>
            t on u.user_id=t.id<set>
            <if test='(mask&amp;1)!=0'>u.disabled=false,</if>
            <if test='(mask&amp;2)!=0'>u.password=t.password,</if>
            <if test='(mask&amp;4)!=0'>u.nick=t.nick,u.school=t.school,u.email=nullif(t.email,''),</if>modified_time=now()</set>
    </update>
    <insert id="insert">
        insert into `user`(user_id,nick,password,school,email)
        values
            <foreach item='item' collection='accounts' separator=','>
                (#{item.id},#{item.nick},#{item.password},#{item.school},nullif(#{item.email},''))
            </foreach>
    </insert>
    <delete id="delete">
        delete from `user` where user_id=#{param1}
    </delete>
</mapper>
