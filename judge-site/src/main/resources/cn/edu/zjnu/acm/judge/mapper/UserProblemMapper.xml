<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.github.io/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.zjnu.acm.judge.mapper.UserProblemMapper">
    <resultMap id="baseResultMap" type="cn.edu.zjnu.acm.judge.domain.UserProblem">
        <result property="user" column="user_id"/>
        <result property="problem" column="problem_id"/>
        <result property="submit" column="submit"/>
        <result property="accepted" column="accepted"/>
    </resultMap>
    <sql id="columns">
        user_id,
        problem_id,
        accepted,
        submit
    </sql>
    <sql id="setUser">
        <set>
            u.solved=COALESCE(t.solved,0),
            u.submit=COALESCE(t.submit,0)
        </set>
    </sql>
    <sql id="setProblem">
        <set>
            p.submit=COALESCE(t.submit,0),
            p.accepted=COALESCE(t.accepted,0),
            p.submit_user=COALESCE(t.submit_user,0),
            p.solved=COALESCE(t.solved,0)
        </set>
    </sql>
    <insert id="init">
        REPLACE INTO user_problem(user_id,problem_id,accepted,submit)
        (
            SELECT
                user_id,
                problem_id,
                sum(if(score=100,1,0)),
                count(solution_id)
            FROM solution
            WHERE score!=-10000 GROUP BY user_id,problem_id
        ) UNION (
            SELECT user_id, problem_id, 0, 0 FROM user_problem
            WHERE (user_id, problem_id) NOT IN (
            SELECT distinct user_id, problem_id
                FROM solution WHERE score!=-10000
            )
        )
    </insert>
    <select id="findOne" resultMap="baseResultMap">
        select <include refid="columns"/>
        from user_problem
        where user_id=#{userId} and problem_id=#{problemId}
    </select>
    <insert id="update">
        replace into user_problem(user_id,problem_id,accepted,submit)
        select user_id,problem_id,sum(if(score=100,1,0)) accepted,count(solution_id) submit
        from solution
        where
            user_id=#{userId} and problem_id=#{problem}
            and score!=-10000
        group by user_id,problem_id
    </insert>
    <update id="updateUser">
        update `user` u left join (
            select
                sum(up.submit) submit,
                sum(if(up.accepted!=0,1,0)) solved
            from user_problem up
            where user_id=#{userId}
        ) t on 1=1
        <include refid="setUser"/>
        where u.user_id=#{userId}
    </update>
    <update id="updateProblem">
        update problem p left join (
            select
                sum(up.submit) submit,
                sum(up.accepted) accepted,
                sum(if(up.submit!=0,1,0)) submit_user,
                sum(if(up.accepted!=0,1,0)) solved
            from user_problem up where problem_id=#{problemId}
        ) t on 1=1
        <include refid="setProblem"/>
        where p.problem_id=#{problemId}
    </update>
    <update id="updateUsers">
        update `user` u left join (
            select
                user_id,sum(submit) submit,
                sum(if(accepted!=0,1,0)) solved
            from user_problem
            group by user_id
        ) t on u.user_id=t.user_id
        <include refid="setUser"/>
    </update>
    <update id="updateProblems">
        update problem p left join (
            select
                problem_id,
                sum(submit) submit,
                sum(accepted) accepted,
                sum(if(submit!=0,1,0)) submit_user,
                sum(if(accepted!=0,1,0)) solved
            from user_problem
            group by problem_id
        ) t on p.problem_id=t.problem_id
        <include refid="setProblem"/>
    </update>
    <select id="findAllSolvedByUserId" resultType="long">
        select problem_id from user_problem
        where user_id=#{userId} and accepted!=0
        order by problem_id
    </select>
    <select id="findAllByUserId" resultMap="baseResultMap">
        select <include refid="columns"/>
        from user_problem
        where user_id=#{userId}
        order by problem_id
    </select>
    <delete id="deleteByProblem">
        delete from user_problem where problem_id=#{param1}
    </delete>
    <delete id="deleteByUser">
        delete from user_problem where user_id=#{param1}
    </delete>
</mapper>
